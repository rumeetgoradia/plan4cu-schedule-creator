// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mysql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

model School {
    school_id   String   @id @db.VarChar(4)
    school_name String   @db.VarChar(255)
    majors      Major[]
    courses     Course[]
}

model Major {
    major_id   String       @id @db.VarChar(4)
    major_name String       @db.VarChar(255)
    school_id  String       @db.VarChar(4)
    school     School       @relation(fields: [school_id], references: [school_id])
    users      User_Major[]
}

model User {
    id                        Int          @id @default(autoincrement())
    name                      String?
    email                     String?      @unique
    emailVerified             DateTime?
    image                     String?
    accounts                  Account[]
    sessions                  Session[]
    expected_graduation_year  Int?
    expected_graduation_month String?      @db.VarChar(10)
    is_admin                  Boolean      @default(false)
    created_at                DateTime     @default(now())
    updated_at                DateTime     @updatedAt
    majors                    User_Major[]
    schedules                 Schedule[]

    @@index([email])
}

model User_Major {
    user_id  Int
    major_id String @db.VarChar(4)
    user     User   @relation(fields: [user_id], references: [id])
    major    Major  @relation(fields: [major_id], references: [major_id])

    @@id([user_id, major_id])
}

model Course {
    course_id   String    @id @db.VarChar(10)
    course_name String    @db.VarChar(255)
    credits     Int
    school_id   String    @db.VarChar(4)
    school      School    @relation(fields: [school_id], references: [school_id])
    sections    Section[]
}

model Section {
    section_id        Int                @id
    section_num       Int
    p_uni             String             @db.VarChar(7)
    capacity          Int
    day               String?            @db.VarChar(15)
    start_time        DateTime           @db.Time()
    end_time          DateTime           @db.Time()
    semester          String             @db.VarChar(2)
    year              Int                @db.Year
    course_id         String             @db.VarChar(10)
    course            Course             @relation(fields: [course_id], references: [course_id])
    professor         Professor          @relation(fields: [p_uni], references: [p_uni])
    schedule_sections Schedule_Section[]
}

model Professor {
    p_uni      String    @id @db.VarChar(7)
    first_name String    @db.VarChar(255)
    last_name  String    @db.VarChar(255)
    sections   Section[]
}

model Schedule {
    schedule_id       Int                @id @default(autoincrement())
    user_id           Int
    label             String             @db.VarChar(255)
    created_at        DateTime           @default(now())
    updated_at        DateTime           @updatedAt
    user              User               @relation(fields: [user_id], references: [id])
    schedule_sections Schedule_Section[]

    @@index([user_id])
}

model Schedule_Section {
    schedule_id Int
    section_id  Int
    schedule    Schedule @relation(fields: [schedule_id], references: [schedule_id])
    section     Section  @relation(fields: [section_id], references: [section_id])

    @@id([schedule_id, section_id])
}

// Necessary for Next auth
model Account {
    id                       String  @id @default(cuid())
    userId                   Int
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? @db.Text
    access_token             String? @db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? @db.Text
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int?

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       Int
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
